package javase02.t01;

import org.junit.Test;

import static javase02.t01.Pen.INK_AMOUNT;
import static javase02.t01.Pen.WRITTEN_INK_AMOUNT;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class PenTest {

    @Test
    public void buttonIsNotPressedAtFirst(){
        Pen pen = new Pen();
        assertTrue(!pen.isButtonPressed());
    }

    @Test
    public void pressButton(){
        Pen pen = new Pen();
        pen.pressButton();
        assertTrue(pen.isButtonPressed());
    }

    @Test
    public void buttonIsNotPressedAfterTwoClicks(){
        Pen pen = new Pen();
        pen.pressButton();
        pen.pressButton();
        assertTrue(!pen.isButtonPressed());
    }

    @Test
    public void cannotWriteBeforePressingButton(){
        Pen pen = new Pen();
        assertTrue(!pen.write());
    }

    @Test
    public void write(){
        Pen pen = new Pen();
        pen.pressButton();
        assertTrue(pen.write());
        assertEquals(INK_AMOUNT - WRITTEN_INK_AMOUNT, pen.getInkAmount());
    }

    @Test
    public void useInkUp(){
        Pen pen = new Pen();
        pen.pressButton();
        for(int i = 0; i < INK_AMOUNT / WRITTEN_INK_AMOUNT + 1; ++i)
            pen.write();
        assertTrue(pen.isUsedUp());
    }

    @Test
    public void cannotWriteIfInkIsUsedUp(){
        Pen pen = new Pen();
        pen.pressButton();
        for(int i = 0; i < INK_AMOUNT / WRITTEN_INK_AMOUNT + 1; ++i)
            pen.write();
        assertTrue(!pen.write());
    }

    @Test
    public void changeRefill(){
        Pen pen = new Pen();
        pen.pressButton();
        for(int i = 0; i < INK_AMOUNT / WRITTEN_INK_AMOUNT + 1; ++i)
            pen.write();
        pen.changeRefill();
        assertEquals(INK_AMOUNT,pen.getInkAmount());
    }
}
